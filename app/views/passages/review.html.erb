<% page_title I18n.t :memory_verse_review, :scope => 'page_titles' %>

<div class="white-box-bg">
<div class="main-verse-review">

    <div class="passage-entry">

        <div class="passage-id"></div>

        <h2  class="passage-title"></h2>

        <div class="passage-text">

        </div>


    </div> <!-- end: passage-entry column -->

    <div class="upcoming-passages upcoming">
        <h2>Upcoming Passages</h2>
    </div> <!-- end: upcoming-passage column -->

</div>
</div>

<script language="JavaScript" type="text/javascript"><!--

    $(document).ready(function() {

        //-------  This can be moved to memverse_lib once development is done
        var reviewState = {
            // setup
            initialize: function () {
                // Retrieve passages that are due for review
                $.getJSON('passages/due.json', function (data) {

                    var items = [];

                    // Build list
                    $.each(data, function( index, mv ) {
                        items.push('<li class="upcoming-verse-ref white2" id="' + mv.id + '">' + mv.ref + '</li>');
                    });

                    // Add entire list
                    $('<ul/>', { 'class': 'passage-list', html: items.join('') }).appendTo('.upcoming-passages');

                });
            },

            selectPassage: function ( passageRef, passageID ) {
                // retrieve memory verses for passage
                $.getJSON('passages/' + passageID + '/memverses.json', function (data) {
                    // display passage
                    mvDisplayPassageForReview( passageRef, passageID, data )
                });
            },

            clearCurrentPassage: function () {
                // check whether user has completed the review of the passage
                var passageNotReviewed = $(".due-mv").length;
                var passageID          = $(".passage-id").html();

                if (passageID) {
                    if (passageNotReviewed) {
                        $('.passage-list #' + passageID).fadeIn(); // show passage again
                    } else {
                        $('.passage-list #' + passageID).remove(); // remove from upcoming passages
                    }
                }

                $(".passage-text").empty();
                $(".passage-title").empty();
            }
        }

        //------- Initialize session ------------------
        reviewState.initialize();

        //------- Select passage for review -----------
        $( ".upcoming-passages" ).on( "click", ".upcoming-verse-ref", function( e ) {
            reviewState.clearCurrentPassage();
            $(this).fadeOut();
            reviewState.selectPassage( $(this).text(), $(this).attr('id') );
        });

        //------- Typing a verse ----------------------
        $(".passage-text").on( "keyup", "input.blank-word", function (e) {

            var correctWord = this.name;
            var userGuess   = this.value.trim();

            // Word correct ==> next word
            if ( scrub_text( correctWord ) === scrub_text( userGuess ) ) {
                $(this).next().focus();  // advance cursor to next blank word
                $(this).replaceWith( correctWord );
            }

            // check for down arrow keypress
            else if ( e.keyCode === 40 ) {
                // show current word
                $(this).val( correctWord ).animate({ color: '#FFD' }, 1100, 'easeInExpo', function() {
                    $(this).val('');
                    $(this).css({color:'#444'}); // same color as .assistance
                });;
            }

        });

        //------- Scoring a verse ----------------------
        $( ".passage-text" ).on( "click", ".score-test-buttons .submit", function( e ) {

            var q            = $(this).attr("q");
            var id           = $(this).parent().prev(".mv-id").html();
            var $nextDue     = $(this).closest(".single-verse-in-passage").nextAll(".due-mv").first();
            var $nextPassage = [];

            // Remove verse-due flag
            $(this).closest(".single-verse-in-passage").removeClass("due-mv");
            // Fade out rating buttons
            $(this).closest(".passage-rating").fadeOut();

            // submit rating
            $.getJSON("/mark_test_quick", { mv: id, q: q  }, function(data) {
                if (data.msg) {  setTimeout(function() {alert(data.msg);}, 1); }  // Give user a non-blocking response
            });

            // If there are more verses due in the passage
            if ($nextDue.length) {
                // Scroll to next verse
                $('html').scrollTo($nextDue, { easing: 'easeInOutCubic', duration: 1500, offset: -250 } );
                // advance cursor to first word of next verse
                $nextDue.find('.blank-word').first().focus();
            } else if ( $(this).closest(".single-verse-in-passage").siblings(".due-mv").length ) {
                // find first skipped verse
                $skippedVerse = $(this).closest(".single-verse-in-passage").siblings(".due-mv").first();
                // Scroll to prior verse
                $('html').scrollTo($skippedVerse, { easing: 'easeInOutCubic', duration: 1500, offset: -250 } );
                // advance cursor to first word of next verse
                $nextDue.find('.blank-word').first().focus();

            } else {
                // Select next passage from top of list
                $nextPassage = $( ".upcoming-passages" ).find(".upcoming-verse-ref").first();
                // console.log('Next passage: ' + $nextPassage);
                if ($nextPassage.length) {
                    // console.log('Reference is: ' + $nextPassage.text() );
                    $nextPassage.fadeOut('slow');
                    reviewState.selectPassage( $nextPassage.text(), $nextPassage.attr('id') );
                } else {
                    alert("No more passages to review.");
                }
            }

        });

    }); // End of jQuery document ready
--></script>