<% page_title "Live Quiz :: " + @quiz.name %>
<div class="white-box-with-margins" style="position:relative">
	<div id="quiz-header">
		<h1 id="quiz-name"><%= @quiz.name %> [<%= link_to @current_user.translation, update_profile_path %>]</h1>
		<div id="quiz-timer"></div>
		<div id="countdown-till"><!-- this will say "till next question" or "till quiz starts" --></div>
		<div id="quizzers-stats" class="quiz-button">
			Quizzers <span id="quizzers-count"></span>
		</div>
	</div>

	<div id="live-quiz">
		<div id="questions-answers">
			<% if current_user == @quiz_master %>
				<div class="quiz-button">
					<%= button_to "Start Quiz", {:action => "start_quiz", :quiz => @quiz.id}, :remote => true, :id => "start-quiz", :class => "button-link" %>
				</div>
			<% end %>
			<div id="quiz-messages">
				<h3>Welcome!</h3>
			</div>

			<div class="clr"></div>

			<div id="quiz-question">
				<h3>Quiz Instructions</h3>
				<p>
					The quiz will have <%= @num_questions %> questions and last <%= @minutes.to_s + (@minutes != 1?" minutes":" minute") %> and <%= @seconds.to_s + (@seconds != 1?" seconds":" second") %>. Each question will be worth a maximum of 15 points.
				</p>
				<p>
					You will answer all the questions on the left side. The middle column will display the scoreboard and the right column is only
					used for chatting with the other contestants.
				</p>
			</div>
			<br/>
			<div id="quiz-answer"></div>
		</div>
	</div>

	<div id="roster-window">
	</div>

	<div id="live-scoreboard">
		<h3>Scoreboard</h3>
		<div id="live-quiz-scores">
			<p>Scores are updated at the end of each question.</p>
		</div>
	</div>

	<div id="chat-window">

		<h3>Chat (<span id="chat_status"><%= @chat_status %></span>) <%= (link_to "Toggle Status", {:controller => "chat", :action => "toggle_channel", :channel => "quiz-<%= @quiz.id %>"}, :remote => true) if current_user == @quiz_master %></h3>

		<div id="chat-stream-narrow">
		</div>

		<%= form_tag('/chat/send', :id => 'chat_window', :remote => true) do %>
			<%= text_field_tag 'msg_body', '', :size => 28 %>
			<%= hidden_field_tag 'sender',  current_user.name_or_login %>
			<%= hidden_field_tag 'user_id', current_user.id %>
			<%= hidden_field_tag 'channel', "quiz-<%= @quiz.id %>" %>
			<%= submit_tag 'Send', {:onclick => "return submitmsg();"} %>
		<% end %>
	</div>

	<div class="clr"></div>
</div>

<script type="text/javascript" charset="utf-8">

	// Init
    var pubnub = PUBNUB.init({
        publish_key   : '<%= PN.publish_key %>',
        subscribe_key : '<%= PN.subscribe_key %>',
        uuid          : '<%= current_user.id %>'
    })

    // LISTEN
    pubnub.subscribe({
        channel : "quiz-<%= @quiz.id %>",
        message : function(m){ alert(m) },
        connect : publish
    })

    // SEND
    function publish() {
        pubnub.publish({
            channel : "hello_world",
            message : "Hi."
        })
    }
	var jug = new Juggernaut();
	jug.meta = {user_id: <%= current_user.id %>, user_name: "<%= current_user.name %>", gravatar_url: "<%= (current_user.blog_avatar_url + "&s=32").html_safe %>"};

	jug.subscribe("/chats/channel2", function(data){
		if(data.status) {
			$("#chat_status").text(data.status);
			var user    = "Memverse Server"
			var message = "Chat Channel " + data.status;
		} else {
			var first_colon  = parseInt(data.indexOf(':'));
			var sender_id    = data.substring(0,first_colon);
			var second_colon = parseInt(data.indexOf(':',first_colon+1));
			var user         = data.substring(first_colon+1,second_colon);
			var message      = data.substring(second_colon+1);
		}

		var u = $("<li/>").text(user).addClass("chat-username");
		var m = $("<li/>").text(message).addClass("chat-message");

		if(!data.status){
			u.attr("id",sender_id); // add sender_id as long as this was not server announcement
		}

		if ((u.text() == $("#chat-stream-narrow li.chat-username").last().text()) && ($("#chat-stream-narrow li").last().attr('class') != 'chat-announcement')) {
			u = "";
		}

		chat_stream_scroll(function(){
			$("#chat-stream-narrow").append(u).append(m);
		});
	});

	function addInputBox(questionType, questionNum, questionAnswer)	{
		switch(questionType) {
			case 'recitation':
				$('#quiz-answer').html("<textarea class='q-answer-input' name='txt" + questionNum + "' id='" + questionNum + "'></textarea>");
				$('#quiz-answer').append("<br/>")
				$('#quiz-answer').append("<input type='submit' value='Answer!' id='submit-answer' class='button-link'>");
				if (!$('#msg_body').is(':focus')) {
					$('#quiz-answer textarea').focus();
				}
				break;

			case 'reference':
				$('#quiz-answer').html("<input type='text' class='q-answer-input' name='txt" + questionNum + "' id='" + questionNum + "'</input>");
				$('#quiz-answer').append("<input type='submit' value='Answer!' id='submit-answer' class='button-link'>");
				$('#quiz-answer input[type="text"]').autocomplete({ source: ['Genesis', 'Exodus', 'Leviticus', 'Numbers', 'Deuteronomy', 'Joshua', 'Judges', 'Ruth', '1 Samuel', '2 Samuel',
					'1 Kings', '2 Kings','1 Chronicles', '2 Chronicles', 'Ezra', 'Nehemiah', 'Esther', 'Job', 'Psalm', 'Proverbs',
					'Ecclesiastes', 'Song of Songs', 'Isaiah', 'Jeremiah', 'Lamentations', 'Ezekiel', 'Daniel', 'Hosea', 'Joel',
					'Amos', 'Obadiah', 'Jonah', 'Micah', 'Nahum', 'Habakkuk', 'Zephaniah', 'Haggai', 'Zechariah', 'Malachi', 'Matthew',
					'Mark', 'Luke', 'John', 'Acts', 'Romans', '1 Corinthians', '2 Corinthians', 'Galatians', 'Ephesians', 'Philippians',
					'Colossians', '1 Thessalonians', '2 Thessalonians', '1 Timothy', '2 Timothy', 'Titus', 'Philemon', 'Hebrews', 'James',
					'1 Peter', '2 Peter', '1 John', '2 John', '3 John', 'Jude', 'Revelation']
				});
				if (!$('#msg_body').is(':focus')) {
					$('#quiz-answer input').focus();
				}
				break;

			case 'mcq':
				break;

			default:
				$('#quiz-answer').html("<input type='text' class='q-answer-input'" + "name='txt" + questionNum + "' id='" + questionNum + "'</input>");
				$('#quiz-answer').append("<input type='submit' value='Answer!' id='submit-answer' class='button-link'>");
	    }

		$('input#submit-answer').click(function() {
			var userAnswer = $('.q-answer-input').val();
			grade = getScore(questionAnswer, userAnswer, questionType);
			if (grade.score != null) {
				$.post("/record_score", {	usr_id:		<%= current_user.id %>,
											usr_name:	'<%= current_user.name_or_login %>',
											usr_login:	'<%= current_user.login %>',
											score: 		grade.score } );
				$("#quiz-messages").html("<p>" + grade.msg + "</p>").children("p").effect('highlight', {}, 3000);
				$('#quiz-answer').html("<strong>Your answer: </strong>" + userAnswer);
			}
		});
	}

	function highlightLast5(periods) {
		if ($.countdown.periodsToSeconds(periods) == 5) {
			$(this).addClass('red-highlight');
		}
	}

	function disableSubmission() {
		$('input#submit-answer').hide();
	}

	jug.subscribe("/live_quiz/quiz_stream", function(data) {
		var q_num  = data.q_num;
		var q_type = data.q_type;
		var q_text;
		var q_ref;
		var q_show;
		var q_ansr;

		var mc_option_a;
		var mc_option_b;
		var mc_option_c;
		var mc_option_d;
		var mc_answer;

		if (q_type != 'mcq') {
			q_ref  = data.q_ref;
			q_text = data.q_passages.<%= current_user.translation %>;
		} else {
			q_text     = data.mc_question;
			q_option_a = data.mc_option_a;
			q_option_b = data.mc_option_b;
			q_option_c = data.mc_option_c;
			q_option_d = data.mc_option_d;
			mc_answer  = data.mc_answer;
		}
		q_time = data.time_alloc;

		switch (q_type)
		{
			case 'recitation':
			  q_show = q_ref;
			  q_ansr = q_text;
			break;

			case 'reference':
			  q_show = q_text;
			  q_ansr = q_ref;
			break;

			case 'mcq':
			  q_show = q_text;
			  q_ansr = mc_answer;
			break;

			default:
			  q_show = 'Error'
		}

		var q   = $("<h3/>").text('Question ' + q_num + ' (of <%= @num_questions %>)').addClass("quiz-q-num");
		var p   = $("<p/>").text(q_show).addClass("quiz-q");
		var div = $("<div/>").append(q).append(p);

		$("#quiz-question").html(div);
		$("#quiz-question").scrollTop($("#quiz-question")[0].scrollHeight);

		if(q_type == 'reference' || q_type == 'recitation'){
			addInputBox(q_type, q_num, q_ansr);
		} else if (q_type == 'mcq'){
			$("#quiz-answer").html(setupMCQ(q_option_a, q_option_b, q_option_c, q_option_d, mc_answer));
			$('input#submit-answer').click(function() {
				$(this).remove();
				var userAnswer = $('input[name=mcq]:checked', '#quiz-answer').val();
				grade = getScore(q_ansr, userAnswer, q_type);
				if (grade.score != null) {
					$.post("/record_score", {	usr_id:		<%= current_user.id %>,
												usr_name:	'<%= current_user.name_or_login %>',
												usr_login:	'<%= current_user.login %>',
												score: 		grade.score } );
					$("#quiz-messages").html("<p>" + grade.msg + "</p>").children("p").effect('highlight', {}, 3000);
					if (grade.score != 15) { // if it's wrong
						$("#quiz-answer input#opt_" + userAnswer).parent().addClass("incorrect");
					}
					$("#quiz-answer input#opt_" + q_ansr.toLowerCase()).parent().addClass("correct");
					$("#quiz-answer input").remove();
				}
			});
		}

		<!-- Countdown clock -->
		$('#quiz-timer').countdown('destroy').removeClass('red-highlight');
		$('#quiz-timer').countdown({until: +q_time, onTick: highlightLast5, onExpiry: disableSubmission, format: 'S'});

		if (q_num == <%= @num_questions %>) { // if last question
			// countdown till question and quiz over
			$("#countdown-till").text("till question and quiz over");
			// setTimeout to put up "Finished" status message when it's done
			setTimeout(function(){$("#countdown-till").html("<strong>Quiz Status:</strong> Finished").effect('highlight', {}, 3000);$('#quiz-timer').countdown('destroy').removeClass('red-highlight');disableSubmission();},q_time*1000);
		} else {
			$("#countdown-till").text("till next question");
		}
	});

	jug.subscribe("/live_quiz/scoreboard", function(data){

		$("#live-quiz-scores").empty();

		$.each(data.scoreboard, function(i, item) {

			var user  	= item.name + " ";
			var score 	= item.score;
			var li 		= $("<li/>");
			var u 		= $("<span/>");
			var s 		= $("<span/>");

			u.text(user).addClass("scoreboard-username");
			s.text(score).addClass("scoreboard-score");

			if(item.login == "<%= current_user.login %>"){
				li.addClass("hilite");
			}

			li.append(u).append(s);

			$("#live-quiz-scores").append(li);
			$("#live-quiz-scores").scrollTop(0);
		});
	});

	user_id = "<%= current_user.id %>";
	user_name = "<%= current_user.name %>";

	$.getJSON('/live_quiz/roster.json', function(data) {
		var roster_items = [];

		$.each(data, function(key, val) {
			if (val.roster.user_name != user_name) {
				roster_items.push(build_roster_item(val.roster.user_id, val.roster.user_name, val.roster.gravatar_url));
			}
		});

		roster_items.push(build_roster_item(user_id, "Me", "<%= (current_user.blog_avatar_url + "&s=32").html_safe %>")); // last roster_item is self

		$("#roster-window").html(roster_items.join(''));
		$("#quizzers-count").html("(" + roster_items.length + ")");
	});

	jug.subscribe("/roster", function(msg) {
		// Somebody joined or left the room
		// We need to post a little status message in the chat log column
		// ^^ Currently the msg.klass is always Roster.
		if(msg.klass == "Roster" && msg.type != "update" && msg.record.roster.user_id != user_id) {

			var roster_uid   = msg.record.roster.user_id;
			var roster_uname = msg.record.roster.user_name;
			var gravatar_url = msg.record.roster.gravatar_url;

			var user_link   = build_user_link(roster_uid, roster_uname);
			var li  = $("<li/>").addClass("chat-announcement").append(user_link);

			switch(msg.type){
				case 'create':
					li.append(" entered the room.");
					var div = $(build_roster_item(roster_uid, roster_uname, gravatar_url));
					$("#roster-window").scrollTop($("#roster-window")[0].scrollHeight).append(div);
					div.effect('highlight', {}, 3000);
					$("#quizzers-stats").effect('highlight', {}, 3000);
					$("#quizzers-count").html("(" + $("div.roster-item").length + ")");
					break;
				case 'destroy':
					li.append(" left the room.");
					$("div#" + roster_uid).remove();
					$("#quizzers-count").html("(" + $("div.roster-item").length + ")");
					break;
			}

			chat_stream_scroll(function(){
				$("#chat-stream-narrow").append(li);
			});
		}
	});

	$("#quizzers-stats").click(function() {
		if( $('#roster-window').is(':visible') ) {
			$('#roster-window').slideUp();
			$(this).removeClass('expanded');
		} else {
			$('#roster-window').slideDown();
			$(this).addClass('expanded');
		}
	});

	<% if current_user == @quiz_master %>

	$("#chat-stream-narrow").delegate("li.chat-username", "hover", function(){
		$(".ban").remove(); // remove any previous ban links
		if($(this).attr("id") && $(this).attr("id").length > 0){ // server announcements don't have user id
			ban_id = $(this).attr("id");
			$(this).append(" <a href='/chat/toggle_ban?user_id="+ban_id+"' data-remote class='ban'>(toggle ban)</a>");
		}
	});

	<% end %>

	function submitmsg() {
		if ($("#msg_body").val() == "") {
			alert("Please put text in your message.");
			return false;
		}
		else {
			return true;
		}
	}

	$.getJSON('/live_quiz/till_start/<%= @quiz.id %>.json', function(data) {
		if (data.status) {
			$("#countdown-till").html("<strong>Quiz Status:</strong> " + data.status);
		} else {
			$('#quiz-timer').countdown({until: data.time, significant: 2});
			$("#countdown-till").text("till quiz starts");
		}
	});

</script>
