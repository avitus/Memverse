require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe VersesController do

  login_user

  # This should return the minimal set of attributes required to create a valid
  # Verse. As you add validations to Verse, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { :translation => "NIV", :book_index => 43, :book => "John", :chapter => 11, :versenum => 35,
      :text => "Jesus wept." }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VersesController. Be sure to keep this updated too.
  def valid_session
    {"warden.user.user.key" => session["warden.user.user.key"]}
  end


  # describe "GET index" do
  #   it "assigns all Verses as @Verses" do
  #     verse = Verse.create! valid_attributes
  #     get :index, {}, valid_session
  #     assigns(:verses).should eq([verse])
  #   end
  # end

  describe "GET show" do
    it "assigns the requested Verse as @Verse" do
      verse = Verse.create! valid_attributes
      get :show, {:id => verse.to_param}, valid_session
      assigns(:verse).should eq(verse)
    end
  end

  # describe "GET new" do
  #   it "assigns a new Verse as @Verse" do
  #     get :new, {}, valid_session
  #     assigns(:verse).should be_a_new(Verse)
  #   end
  # end

  describe "GET edit" do
    it "assigns the requested Verse as @Verse" do
      verse = Verse.create! valid_attributes
      get :edit, {:id => verse.to_param}, valid_session
      assigns(:verse).should eq(verse)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Verse" do
        expect {
          post :create, {:verse => valid_attributes}, valid_session
        }.to change(Verse, :count).by(1)
      end

      it "assigns a newly created Verse as @Verse" do
        post :create, {:verse => valid_attributes}, valid_session
        assigns(:verse).should be_a(Verse)
        assigns(:verse).should be_persisted
      end

      it "redirects to the created Verse" do
        post :create, {:verse => valid_attributes}, valid_session
        response.should redirect_to(Verse.last)
      end
    end

    # describe "with invalid params" do
    #   it "assigns a newly created but unsaved Verse as @Verse" do
    #     # Trigger the behavior that occurs when invalid params are submitted
    #     Verse.any_instance.stub(:save).and_return(false)
    #     post :create, {:verse => { :book => "invalid value" }}, valid_session
    #     assigns(:verse).should be_a_new(verse)
    #   end

    #   it "re-renders the 'new' template" do
    #     # Trigger the behavior that occurs when invalid params are submitted
    #     Verse.any_instance.stub(:save).and_return(false)
    #     post :create, {:verse => { :book => "invalid value" }}, valid_session
    #     response.should render_template("new")
    #   end
    # end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested Verse" do
        verse = Verse.create! valid_attributes
        # Assuming there are no other Verses in the database, this
        # specifies that the Verse created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Verse.any_instance.should_receive(:update_attributes).with({ "last_verse" => "7" })
        put :update, {:id => verse.to_param, :verse => { :last_verse => "7" }}, valid_session
      end

      #==============================================================================================
      # TODO: Need tests to ensure that only an Admin user can make changes to a verse that is used
      #       by multiple users. The two specs below don't currently test this functionality correctly.
      #==============================================================================================

      # it "assigns the requested Verse as @Verse -- admin making change" do
      #   verse = Verse.create! valid_attributes
      #   patch :update, {:id => Verse.to_param, :verse => valid_attributes}, {}
      #   assigns(:verse).should eq(verse)
      # end

      # it "assigns the requested Verse as @Verse -- user making change" do
      #   verse = Verse.create! valid_attributes
      #   patch :update, {:id => Verse.to_param, :verse => valid_attributes}, valid_session
      #   assigns(:verse).should_not eq(verse)
      # end

      it "redirects to the Verse" do
        verse = Verse.create! valid_attributes
        put :update, {:id => verse.to_param, :verse => valid_attributes}, valid_session
        response.should redirect_to(verse)
      end
    end

    describe "with invalid params" do
      it "assigns the Verse as @Verse" do
        verse = Verse.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Verse.any_instance.stub(:save).and_return(false)
        put :update, {:id => verse.to_param, :Verse => { :book => "invalid value" }}, valid_session
        assigns(:verse).should eq(verse)
      end

      it "re-renders the 'edit' template" do
        verse = Verse.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Verse.any_instance.stub(:save).and_return(false)
        put :update, {:id => verse.to_param, :verse => { :book => "invalid value" }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested Verse" do
      verse = Verse.create! valid_attributes
      expect {
        delete :destroy, {:id => verse.to_param}, valid_session
      }.to change(Verse, :count).by(-1)
    end

    it "redirects to the Verses list" do
      verse = Verse.create! valid_attributes
      delete :destroy, {:id => verse.to_param}, valid_session
      response.should redirect_to(verses_url)
    end
  end

end