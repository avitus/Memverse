version: 2
jobs:
  build:
    
    parallelism: 1
    
    docker:

      # App Server
      - image: circleci/ruby:2.4-node-browsers
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          DB_HOST: 127.0.0.1
          RAILS_ENV: test

      # Database
      - image: library/mysql:5.7
        environment:
          MYSQL_ROOT_PASSWORD: demo
          MYSQL_DATABASE: memverse_test
          MYSQL_ALLOW_EMPTY_PASSWORD: true
        ports:
          - 3306:3306

      - image: redis:3.2

    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:UMuaEcfwEEAc5T38Fdx7qxeB3dMyR0TJIZCzStQkp3s circleci@memverse.com"

      - checkout

      - run: 
          name: Install MySQL client
          command: |
            sudo apt update
            sudo apt install -y mysql-client

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      - restore_cache:
          keys:
            - memverse-{{ checksum "Gemfile.lock" }}

      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: memverse-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Only necessary if app uses webpacker or yarn in some other way
      # - restore_cache:
      #     keys:
      #       - rails-demo-yarn-{{ checksum "yarn.lock" }}
      #       - rails-demo-yarn-

      # ALV: For now we are going to stick with the old school asset pipeline
      # Eventually, we should switch to Yarn (and/or webpacker)

      # - run:
      #     name: Yarn Install
      #     command: yarn install

      # Store yarn / webpacker cache
      # - save_cache:
      #     key: rails-demo-yarn-{{ checksum "yarn.lock" }}
      #     paths:
      #       - ~/.yarn-cache

      # We can probably remove the next three run commands once the Gecko driver is more widely available
      - run:
          name: Download Geckodriver
          command: |
            curl -L https://github.com/mozilla/geckodriver/releases/download/v0.19.1/geckodriver-v0.19.1-linux64.tar.gz | tar xz
            chmod +x geckodriver
            sudo mv geckodriver /usr/local/bin

      - run:
          name: Install Gecko Gemfile
          command: |
            gem install selenium-webdriver -v '~> 3.142.3'

      - run:
          name: Wait for DB
          command: |
            until mysql -h 127.0.0.1 -P 3306 -u root -pdemo -e "SELECT 1" >/dev/null 2>&1; do
              echo "Waiting for MySQL to be ready..."
              sleep 2
            done

      - run:
          name: Verify Database Configuration
          command: |
            echo "Testing database connection..."
            mysql -h 127.0.0.1 -P 3306 -u root -pdemo -e "SHOW DATABASES;"

      - run:
          name: Database (Create)
          command: RAILS_ENV=test bundle exec rake db:create

      - run:
          name: Database (Load Schema)
          command: RAILS_ENV=test bundle exec rake db:schema:load

      - run:
          name: Database (Prepare)
          command: RAILS_ENV=test bundle exec rake db:test:prepare

      - run:
          name: Wait for Redis
          command: dockerize -wait tcp://localhost:6379 -timeout 1m

      # Run rspec in parallel
      - type: shell
        name: Rspec tests
        command: |
          bundle exec rspec --profile 10 \
                            --format RspecJunitFormatter \
                            --out test_results/rspec.xml \
                            --format progress \
                            $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      # Run Jasmine tests in parallel
      - run:
          name: Jasmine tests 
          command: |
            bundle exec rake spec:javascript
          when: always

      # Run cucumber in parallel
      - run:
          name: Cucumber tests 
          command: |
            mkdir -p ~/cucumber 
            bundle exec cucumber --format progress --format junit --out test_results/cucumber.xml
          when: always

      # Save test results for timing analysis
      - store_test_results:
          path: test_results

# database: 
#   post:
#     - sudo cp ./config/environments/sphinx.conf /etc/sphinxsearch/sphinx.conf
#     - sudo sed -i -e 's,START=no,START=yes,' /etc/default/sphinxsearch
#     - service sphinxsearch start