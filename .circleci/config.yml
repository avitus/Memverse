version: 2
jobs:
  build:
    parallelism: 1
    docker:

      # App Server
      - image: circleci/ruby:2.4-node
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          MYSQL_ROOT_HOST: "%"
          # PGHOST: 127.0.0.1
          # PGUSER: circleci-demo-ruby
          RAILS_ENV: test

      # Database
      - image: library/mysql:5.6
        environment:
          MYSQL_ROOT_PASSWORD: demo
          MYSQL_DATABASE: memverse_test
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_ROOT_HOST: "%"
        ports:
          - 3306:3306

    steps:
      - checkout

      - run: 
          name: Install MySQL client
          command: sudo apt install mysql-client

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-

      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Only necessary if app uses webpacker or yarn in some other way
      # - restore_cache:
      #     keys:
      #       - rails-demo-yarn-{{ checksum "yarn.lock" }}
      #       - rails-demo-yarn-

      # ALV: For now we are going to stick with the old school asset pipeline
      # Eventually, we should switch to Yarn (and/or webpacker)

      # - run:
      #     name: Yarn Install
      #     command: yarn install

      # Store yarn / webpacker cache
      # - save_cache:
      #     key: rails-demo-yarn-{{ checksum "yarn.lock" }}
      #     paths:
      #       - ~/.yarn-cache

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - run:
          name: Database setup
          command: RAILS_ENV=test bundle exec rake db:create
          command: RAILS_ENV=test bundle exec rake db:schema:load
          command: RAILS_ENV=test bundle exec rake db:test:prepare

      # Run rspec in parallel
      - type: shell
        command: |
          bundle exec rspec --profile 10 \
                            --format RspecJunitFormatter \
                            --out test_results/rspec.xml \
                            --format progress \
                            $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)


      # Save test results for timing analysis
      - store_test_results:
          path: test_results

# database: 
#   post:
#     - sudo cp ./config/environments/sphinx.conf /etc/sphinxsearch/sphinx.conf
#     - sudo sed -i -e 's,START=no,START=yes,' /etc/default/sphinxsearch
#     - service sphinxsearch start